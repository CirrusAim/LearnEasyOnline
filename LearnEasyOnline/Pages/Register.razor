@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime // Inject IJSRuntime

<h3>Student Registration</h3>

@if (!string.IsNullOrEmpty(message))
{
    <p class="@(isSuccess ? "alert alert-success" : "alert alert-danger")">@message</p>
}

<EditForm Model="@registrationModel" OnValidSubmit="@HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="fullname">Full Name</label>
        <InputText id="fullname" class="form-control" @bind-Value="registrationModel.FullName" style="width: 500px; height: 40px;" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" style="width: 500px; height: 40px;" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" style="width: 500px; height: 40px;" />
    </div>
    <div class="form-group">
        <label for="phonenumber">Phone Number</label>
        <InputText id="phonenumber" class="form-control" @bind-Value="registrationModel.PhoneNumber" style="width: 500px; height: 40px;" />
    </div>
    <div class="form-group">
        <label for="age">Age</label>
        <InputNumber id="age" class="form-control" @bind-Value="registrationModel.Age" style="width: 500px; height: 40px;" />
    </div>
    <p></p>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegisterRequest registrationModel = new RegisterRequest();
    private string message;
    private bool isSuccess;

    private async Task HandleRegistration()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/register", registrationModel);

            if (response.IsSuccessStatusCode)
            {
                message = await response.Content.ReadAsStringAsync();
                isSuccess = true;
                registrationModel = new RegisterRequest(); // Clear the form
                                                           // Optionally, redirect to login page after successful registration
                                                           // NavigationManager.NavigateTo("/login");
                await JSRuntime.InvokeVoidAsync("alert", "Registration successful! Please login."); // Show an alert
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                message = $"Registration failed: {response.ReasonPhrase}";
                isSuccess = false;
                var errors = await response.Content.ReadFromJsonAsync<IDictionary<string, string[]>>();
                if (errors != null)
                {
                    foreach (var error in errors)
                    {
                        message += $"\n{error.Key}: {string.Join(", ", error.Value)}";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
            // Log the error using a proper logging mechanism (e.g., ILogger)
            Console.Error.WriteLine(ex);
        }
    }

    public class RegisterRequest
    {
        [Required]
        public string FullName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        public string? PhoneNumber { get; set; }

        [Range(1, 150)]
        public int Age { get; set; }
    }
}