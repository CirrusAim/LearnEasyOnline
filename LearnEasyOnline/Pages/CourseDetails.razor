@page "/course/{courseId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime // Inject IJSRuntime

<h3>Course Details</h3>

@if (course == null)
{
    <p>Loading course details...</p>
}
else if (course == null)
{
    <p>Course not found.</p>
}
else
{
    <h2>@course.Title</h2>
    <p>@course.Description</p>
    <p>Price: @((course.Price != null) ? course.Price.Value.ToString("C") : "Free")</p>

    @if (course.Price > 0)
    {
        <button class="btn btn-success" @onclick="@(() => PurchaseCourse(course.Id, course.Price))">Purchase</button>
    }
    
}

@code {
    [Parameter]
    public int courseId { get; set; }

    private Course course;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            course = await Http.GetFromJsonAsync<Course>($"api/Courses/{courseId}");
        }
        catch (Exception ex)
        {
            message = $"Error loading course details: {ex.Message}";
            Console.WriteLine(message);
            course = null;
        }
    }

    private async Task PurchaseCourse(int courseId, decimal? price)
    {
        if (price == null || price <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "This course is free and does not require purchase.");
            return;
        }

        try
        {
            // Payment Simulation

            var paymentSuccessful = await SimulatePayment(price.Value);

            if (paymentSuccessful)
            {
                var purchaseData = new { CourseId = courseId };
                var response = await Http.PostAsJsonAsync("api/Payments/purchase", purchaseData); 
                if (response.IsSuccessStatusCode)
                {
                    var confirmation = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Purchase successful! Confirmation: {confirmation}");
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Failed to record purchase.  Error: {errorMessage}");
                }
                NavigationManager.NavigateTo($"/purchaseconfirmation/{courseId}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Payment failed. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred during purchase: {ex.Message}");
            Console.Error.WriteLine(ex);
        }
    }

    private async Task<bool> SimulatePayment(decimal amount)
    {
        await Task.Delay(1000); 

        // Simulating 80% success for payment at all times

        var random = new Random();
        return random.Next(100) < 80;
    }

    public class Course
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal? Price { get; set; } 
    }
}
