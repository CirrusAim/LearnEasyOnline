@page "/login"
     @inject HttpClient Http
     @using System.ComponentModel.DataAnnotations

     @inject NavigationManager NavigationManager
     @inject IJSRuntime JSRuntime

<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <p class="@(isSuccess ? "alert alert-success" : "alert alert-danger")">@message</p>
}

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" style="width: 500px; height: 40px;" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" style="width: 500px; height: 40px;" />
    </div>
    <div class="form-group">
        <label for="rememberMe">Remember Me</label>
        <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string message;
    private bool isSuccess;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                message = result?.Message ?? "Login successful!"; // Handle null
                isSuccess = true;
                // Store the token securely (e.g., in local storage, with considerations)
                if (result?.Token != null)
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    //  await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "authToken", result.Token); //alternative
                }

                NavigationManager.NavigateTo("/courses"); // Redirect to home or another page
            }
            else
            {
                message = $"Login failed: {response.ReasonPhrase}";
                isSuccess = false;
                // Handle different error codes (e.g., 401 Unauthorized)
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    message = "Invalid credentials. Please check your email and password.";
                }
                else
                {
                    message = $"Login failed: {response.ReasonPhrase}";
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
            Console.Error.WriteLine(ex);
        }
    }

    public class LoginRequest
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        public bool RememberMe { get; set; } = false;
    }

    public class LoginResponse
    {
        public string Message { get; set; }
        public string? Token { get; set; } 
    }
     }